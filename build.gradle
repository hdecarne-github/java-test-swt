// Plugins
plugins {
	id "de.carne.java-tools" version "1.2.0" apply false
	id "org.sonarqube" version "3.3" apply false
	id "org.owasp.dependencycheck" version "6.5.0.1"
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")
def releaseBuild = !snapshotBuild

def mavenReleaseRepository = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def mavenSnapshotRepository = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

def resolveProperty(propertyName, envName, defValue = "<undefined>") {
	return ((project.findProperty(propertyName) ?: System.getenv(envName)) ?: defValue);
}

// Projects
defaultTasks "classes", "testClasses", "javadoc"

subprojects {

	apply plugin: "java-library"
	apply plugin: "jacoco"
	apply plugin: "de.carne.java-tools"
	apply plugin: "org.sonarqube"
	apply plugin: "maven-publish"
	apply plugin: "signing"
	apply plugin: "eclipse"
	
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	tasks.withType(JavaCompile) {
		// Caused by org.eclipse.jdt.annotation
		options.compilerArgs += ["-Xlint:-requires-transitive-automatic"]
	}

	plugins.withType(JavaPlugin).configureEach {
		java {
			modularity.inferModulePath = true
		}
	}
	
	repositories {
		mavenCentral()
		if(snapshotBuild) {
			maven { url mavenSnapshotRepository }
		}
		mavenLocal()
	}
	
	def sharedSrcDir = "../${rootProject.name}-gtk-linux-x86_64/shared-src"
	
	javatools {
		generateI18N {
			enabled = true
			bundles = fileTree("${sharedSrcDir}/main/resources") {
				include "**/*I18N.properties"
			}
			lineSeparator = "\n"
		}
	}

	sourceSets {
		main {
			java {
				srcDir "${sharedSrcDir}/main/java"
				srcDir javatools.generateI18N.genDir
			}
			resources {
				srcDir "${sharedSrcDir}/main/resources"
			}
		}
		test {
			java {
				srcDir "${sharedSrcDir}/test/java"
			}
			resources {
				srcDir "${sharedSrcDir}/test/resources"
			}
		}
	}
	
	def platformSuffix = project.name.substring(rootProject.name.length())
	def swtPlatformSuffix = platformSuffix.replace("-", ".")

	dependencies {
		api(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
		api(group: "org.eclipse.platform", name: "org.eclipse.swt${swtPlatformSuffix}", version: project.swtVersion) {
			exclude(group: "org.eclipse.platform", module: 'org.eclipse.swt.${osgi.platform}')
		}
		implementation(group: "de.carne", name: "java-default", version: project.javaDefaultVersion)
		implementation(group: "de.carne", name: "java-test", version: project.javaTestVersion)
		implementation(group: "org.mockito", name: "mockito-junit-jupiter", version: project.mockitoVersion)
		implementation(group: "org.mockito", name: "mockito-inline", version: project.mockitoVersion)
	}
	
	jar {
		manifest {
			attributes(
				'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
				'Build-Jdk' : System.properties['java.version'],
				'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
				'X-Compile-Target-JDK': targetCompatibility,
				'X-Compile-Source-JDK': sourceCompatibility,
				'X-Module-Id': project.name,
				'X-Module-Name': project.name,
				'X-Module-Version': project.version,
				'X-Module-DocURL': projectUrl,
				'X-Module-License': projectLicenseUrl
			)
		}
	}

	test {
		useJUnitPlatform()
		// SWT display can only be created once per VM
		forkEvery = 1
		testLogging {
			events "started", "failed", "passed", "skipped"
			exceptionFormat "full"
		}
		enabled = project.name.endsWith(javatools.platform.swtToolkit)
		workingDir = project.buildDir
	}

	project.tasks["sonarqube"].enabled = test.enabled

	jacoco {
		toolVersion = project.jacocoVersion
	}
		
	jacocoTestReport {
		dependsOn test
		reports {
			xml.required = true
			xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		}
	}
	test.finalizedBy jacocoTestReport
	
	sonarqube {
		properties {
			property 'sonar.projectKey', "${rootProject.group}:${rootProject.name}"
			property 'sonar.projectName', rootProject.name
			property 'sonar.coverage.jacoco.xmlReportPaths', jacocoTestReport.reports.xml.destination
		}
	}
	
	java {
		withJavadocJar()
		withSourcesJar()
	}
	sourcesJar.dependsOn(generateI18N)
	
	publishing {
		repositories {
			maven {
				url = (releaseBuild ? mavenReleaseRepository : mavenSnapshotRepository)
				credentials {
					username = project.resolveProperty("ossrhUsername", "OSSRH_USERNAME")
					password = project.resolveProperty("ossrhPassword", "OSSRH_PASSWORD")
				}
			}
		}
	    publications {
			javaArtifacts(MavenPublication) {
				from components.java
				pom {
					name = project.name
					description = projectDescription
					url = projectUrl
					licenses {
						license {
							name = projectLicense
							url = projectLicenseUrl
							distribution = "repo"
						}
					}
					developers {
						developer {
							id = project.resolveProperty("developerId", "DEVELOPER_ID")
							name = project.resolveProperty("developerName", "DEVELOPER_NAME")
							email = project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
						}
					}
					scm {
						url = projectScmUrl
					}
				}
			}
		}
	}
	
	signing {
		sign publishing.publications.javaArtifacts
	}
	
	tasks.withType(Sign) {
		onlyIf { releaseBuild }
	}

	eclipse {
		classpath {
			downloadSources = true
			downloadJavadoc = true
			file {
				whenMerged {
					def eeaPath = project.findProperty("eclipse.eeaPath");
					 
					entries.forEach {
						if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
							if(eeaPath != null) {
								it.entryAttributes.put("annotationpath", eeaPath)
							}
						} else if(it.path.contains("/caches/modules-2/")) {
							if(eeaPath != null) {
								it.entryAttributes.put("annotationpath", eeaPath)
							}
						} else if(it.path.contains("/generated-src/")) {
							it.entryAttributes.put("ignore_optional_problems", "true")
						}
					}
				}
			}
		}
	}
}
